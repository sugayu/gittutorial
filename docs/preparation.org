* 練習1の準備
** Gitコマンドの準備
~which git~ で ~git~ コマンドが使えるかどうか確認する。
~which git~ の出力で ~git~ コマンドが存在するパスが返ってきたらコマンドが使える。
Homebrewを使っているなら ~brew install git~ で最新版をインストールしてもいいかも。

* 練習3の準備: Githubアカウントの準備
** Githubのアカウント作成
Githubアカウントを持っていなければ作成する。
今度使い続けることを考慮したうえでアカウント名を考えると良い。

** ssh鍵作成
Githubへssh接続するためにssh鍵を作成する必要がある。
以下のコマンドでEd25519鍵を作成する。
#+begin_src bash
  mkdir ~/.ssh
  cd ~/.ssh
  ssh-keygen -o -a 100 -t ed25519
#+end_src
パスフレーズの入力はした方が良いと言われてはいるが、今回は何も入力せずにエンターを押してください。
もし気になるなら、気になったときに作り直せばいい。
上記コマンドで .ssh ディレクトリに ~id_ed25519~ (秘密鍵) と ~id_ed25519.pub~ (公開鍵) が作成される。
ssh鍵認証は、接続先サーバーに公開鍵を置き、手元(クライアント)の秘密鍵と称号することで認証するシステム。
公開鍵は外部に公開するものだが、 *秘密鍵は絶対に外部に公開してはいけない* 。

公開鍵 ~id_ed25519.pub~ を Github へ持っていく。
Github上で右上のアイコンから Setting → SSH and GPG keys と進む。
New SSH Key から新しい鍵を登録する。
タイトルは自分が鍵を区別する際に分かりやすいようなタイトルをつけ、 Key の欄に公開鍵の中身を入力して追加する。

今後の ssh 接続が楽なように、 ~/.ssh/config に以下を書き込む。
#+begin_example
  Host github
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519
#+end_example
ターミナル上で ~ssh github~ と打ち、
#+begin_example
  Hi <UserName>! You've successfully authenticated, but GitHub does not provide shell access.
  Connection to github.com closed.
#+end_example
と表示されればうまく動いている。

ssh 接続はパスワード認証よりも鍵認証の方が推奨されているので、今後もここで作った鍵を使って、同様にログインできるようにすればいい。
サーバーに公開鍵を置く方法はインターネットで調べるとたくさん出てくる。

** リポジトリのクローン
練習3用の作業ディレクトリ上で、チュートリアルのためのリポジトリをGithubからクローンする。
#+begin_src bash
  git clone github:sugayu/gittutorial.git
#+end_src
で現在のディレクトリに gittutorial というディレクトリが作成される。

gittutorial ディレクトリのルートで(つまり ~cd gittutorial~ と打ったあとに)、以下のコマンドを打ってコードを実行する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
- ~PYTHONPATH~ :: Pythonコードのパスを設定する環境変数。
  コマンドの直前に代入すると、そのコマンドを走らせるときだけ環境変数を上書きすることができる。
- ~python -c~ :: 直後の文字列を Python で実行する。
- ~;~ :: Python で複数行にわたるコードを1行で書きたいときはセミコロンを使う。
  Python でなんでもかんでも1行にまとめることは推奨されないので、ターミナルでワンライナーを書くときに使うくらいで。

~print_favorites~ を実行すると、「コード作成者の好きなもの」が表示される。

* 設定しておくと便利なことがら

** 変更ログを分かりやすくする
~/.gitconfig に以下を入力する。
#+begin_example
  [alias]
      graph = log --graph --date-order --all -C -M --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short
#+end_example
これで ~git graph~ を打つとブランチの枝分かれなども確認できて便利。

** エディタにGitツールを入れる
プログラムはエディタで編集するので、エディタ上でGitを動かしてしまうのが1番簡単。
エディタとしてVSCodeを使っているのであれば、VSCodeにGitを管理するプラグイン (GitGraph?) を入れてしまうのが良いだろう。

** Git completionを入れる
~bash-completion~ や ~git-completion~ を入れるとターミナル上で補完が効くようになる。

~bash~ を使っている場合は ~bash-completion~ を以下のようにしてHomebrewを通じて入れる。
#+begin_src bash
  brew install bash-completion
#+end_src
~bash~ 以外の ~zsh~ や ~fish~ などのシェルを使っている人は自分で調べてください。

その後、 ~/.bashrc に bash_completion.sh の実行コマンドを以下のように書き込む。
#+begin_src bash
  cmdprefix=""
  if (type "brew" > /dev/null 2>&1); then
      cmdprefix=$(brew --prefix)
  fi
  test -r "${cmdprefix}/etc/profile.d/bash_completion.sh" && . "${cmdprefix}/etc/profile.d/bash_completion.sh"
#+end_src

これで ~bash-completion~ が効くようになり、 ~bash~ コマンドの補完したいときに<TAB>キーで補完できるようになる。
ファイル ${cmdprefix}/etc/bash_completion.d/git-completion.bash も同時に存在していると思うのだが、
もし存在していなかったら導入の仕方を調べてください。
bash_completion.d の中に git-completion.bash が入っていれば、 ~git~ の補完も効くようになってコマンドを打つのが楽になる。

ターミナルにおける ~git-completion~ の設定は .bashrc でやればよい。
以下は菅原の .bashrc に書かれている ~git-completion~ に関する該当箇所である。
#+begin_src bash
  GIT_PS1_SHOWDIRTYSTATE=1
  # GIT_PS1_SHOWUNTRACKEDFILES=0
  # GIT_PS1_SHOWSTASHSTATE=0
  # GIT_PS1_SHOWUPSTREAM=0

  if [ "$color_prompt" = yes ]; then
      PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '
  else
      PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(__git_ps1)\$ '
  fi
  unset color_prompt force_color_prompt
#+end_src
