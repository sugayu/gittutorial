* 練習2の準備: Gitレポジトリの準備---sshやpipなど
** Githubのアカウント作成
Githubアカウントを持っていなければ作成する。
今度使い続けることを考慮したうえでアカウント名を考えると良い。

** ssh鍵作成
Githubへssh接続するためにssh鍵を作成する必要がある。
以下のコマンドでEd25519鍵を作成する。
#+begin_src bash
  mkdir .ssh
  ssh-keygen -o -a 100 -t ed25519
#+end_src
パスフレーズの入力はした方が良いと言われてはいるが、今回は何も入力せずにエンターを押してください。
もし気になるなら、気になったときに作り直せばいい。
上記コマンドで .ssh ディレクトリに ~id_ed25519~ (秘密鍵) と ~id_ed25519.pub~ (公開鍵) が作成される。
ssh鍵認証は、接続先サーバーに公開鍵を置き、手元(クライアント)の秘密鍵と称号することで認証するシステム。
公開鍵は外部に公開するものだが、 *秘密鍵は絶対に外部に公開してはいけない* 。

公開鍵 ~id_ed25519.pub~ を Github へ持っていく。
Github上で右上のアイコンから Setting → SSH and GPG keys と進む。
New SSH Key から新しい鍵を登録する。
タイトルは自分が鍵を区別する際に分かりやすいようなタイトルをつけ、 Key の欄に公開鍵の中身を入力して追加する。

今後の ssh 接続が楽なように、 ~/.ssh/config に以下を書き込む。
#+begin_example
  Host github
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519
#+end_example
ターミナル上で ~ssh github~ と打ち、
#+begin_example
  Hi <UserName>! You've successfully authenticated, but GitHub does not provide shell access.
  Connection to github.com closed.
#+end_example
と表示されればうまく動いている。

ssh 接続はパスワード認証よりも鍵認証の方が推奨されているので、今後もここで作った鍵を使って、同様にログインできるようにすればいい。
サーバーに公開鍵を置く方法はインターネットで調べるとたくさん出てくる。

** Python環境の構築
この項目は Git とは直接関係ないのでやらなくてもいい。
ここで設定をしておくと、 Python パッケージを作る際に気をつけるべきことの話につながる。

必須ではないがおすすめ： ~conda~ で新しく環境を作成する。
環境を作成したのち、その環境でチュートリアル用のコードをダウンロードする。
#+begin_src bash
  conda create -n gittutorial python=3.9
  conda activate gittutorial
  pip install git+ssh://git@github.com/sugayu/gittutorial.git
#+end_src
正しくダウンロードできていれば、以下のコードが動く。詳細は次の節で。
#+begin_src bash
  python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src

** リポジトリのクローン
練習2用の作業ディレクトリ上で、チュートリアルのためのリポジトリをGithubからクローンする。
#+begin_src bash
  git clone github:sugayu/gittutorial.git
#+end_src
で現在のディレクトリに gittutorial というディレクトリが作成される。

gittutorial ディレクトリのルートで、以下のコマンドを打ってコードを実行する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
- ~PYTHONPATH~ :: Pythonコードのパスを設定する環境変数。
  コマンドの直前に代入すると、そのコマンドを走らせるときだけ環境変数を上書きすることができる。
- ~python -c~ :: 直後の文字列を Python で実行する。
- ~;~ :: Python で複数行にわたるコードを1行で書きたいときはセミコロンを使う。
  Python でなんでもかんでも1行にまとめることは推奨されないので、ターミナルでワンライナーを書くときに使うくらいで。

~print_favorites~ を実行すると、「コード作成者の好きなもの」が表示される。
