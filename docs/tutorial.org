#+title: Git Tutorial

* 練習1: Gitを使って履歴を残す---コマンドラインの練習
この練習はローカルの作業で完結する。

** 目標
日々の作業に使う感覚で Git を扱える。

** 作業ディレクトリを作る
好きな場所にディレクトリを作成し、中に入る。
~git init~ をして Git を準備する。
~ls -a~ で ~.git~ ディレクトリが作成されたことを確認する。

** ファイルを編集する
好きなようにファイルを作成する。

*** 特に好きなものが無い場合---ターミナル操作の練習
ターミナルの練習としてファイル作成の複数の方法を試してみる。
作ったファイルの中身は ~cat~, ~more~, ~less~ などで確認できる。
1. 空ファイル作成(~touch~):
   ~touch doc1.txt~ で空ファイルを作成する。
2. 出力のリダイレクト(~>~):
   ~echo -e "Tutorial.\nThis text is doc2." > doc2.txt~
   で文字列をファイルに書き込む。
3. 標準入力の書き込み(~cat~):
   ~cat > doc3.txt~ のあと文章を打ち込む。
   例えば "Tutorial<Enterを押す>This text is doc3."
   ~Ctrl-D~ で End of File を入力して抜け出す。
4. テキスト結合(~cat~):
   ~cat doc2.txt doc3.txt > doc4.txt~ でテキストを結合してファイル出力する。
5. パイプの使用(~|~):
   ~ls | cat > doc5.txt~ でディレクトリ内容をファイルに書き出す。
   (doc5.txtに"doc5.txt"が書き込まれている。このことから、このコマンドの実行順序が分かる。)

** ファイルをGitの管理下におく
1. ~git status~ で状態を確認する。
   "Untracked files:" の中に新しく作成したファイルやディレクトリが一覧として表示されている。
2. ~git add .~ で全てのファイルをステージングする。
   ~git status~ でGit内部でファイルがどのように扱われているか(状態がどのように変化したか)確認する。
3. ~git commit -m "First commit"~ で変更内容をコミットする。
   1番最初のコミットなので、通例に従ってコミットメッセージは "First commit" にしておいた。
   内容は変更内容を端的に表したものにするべき。
4. ~git config~ をしなさい、という警告が出た場合は ~git~ に名前とメールアドレスをまだ教えていない。
   指定されたコマンドで ~git~ に名前とメールアドレスを与える。
5. ~git status~ で現在の状態を、 ~git log~ でコミット履歴を表示して確認する。

以上の作業で作成したファイルをGitの管理下に置くことができた。

現在のブランチを確認する。
~git status~ の出力の1行目に On branch main とあればブランチ名は ~main~ である。
環境によっては ~main~ ではなく ~master~ の場合もある。

** ファイルを編集する
作業用に新しく ~dev~ ブランチを切るために、 ~git checkout -b dev~ を入力する。
~git status~ や ~git branch~ で現在ローカルに存在するブランチを確認する。

好きなようにファイルを編集する。

*** 特に好きなものが無い場合---ターミナル操作の練習
1. ファイル追記(~>>~):
   ~echo "This is the end of the line." >> doc2.txt~ でファイルに文字列を追加する。
2. 文字列検索(~grep~):
   ~cat * | grep "x" > doc6.txt~ で、現在のディレクトリにある全てのファイル内容を結合して表示し、
   その中で"x" を含む行だけをファイルに書き出す。
3. 文字列置換(~sed~):
   - Macの場合 ~sed -i "" "s/is doc/is not doc/g" doc4.txt~
   - Linuxの場合 ~sed -i -e "s/is doc/is not doc/g" doc4.txt~
   でdoc4.txtの中身を簡単に修正して上書きする。
   オプション ~-i~ がファイル上書きコマンドであり、その後に ".bk" と書くことでバックアップファイルを作成する。
   空文字列 "" を指定するとバックアップファイルは作成されない。
   MacとLinuxはデフォルトで入っている ~sed~ の系統が違っており、コマンドのオプションの振舞いが異なるので注意する。
   ~sed~ コマンドは便利だが、意図しない結果にならないか注意する。
4. 文字列置換(~awk~):
   ~awk 'NR <= 3{print NR "---" $0 }; NR > 3{gsub("txt", "jpeg", $0); print $0}' doc5.txt > doc7.txt~ で
   3行目までは行番号を追加し、4行目以降は拡張子をjpegに変更して、新しいファイルに書き出す。
   古い ~awk~ コマンドでは上書き保存はできないので注意する。
   ~awk~ は表の形をしたテキストの抽出作業に向いているので、 ~sed~ と良いところを補い合って使いわける。

~git status~ で変更内容を確認する。
チュートリアルどおりにファイルを編集すれば、
- "Changes not staged for commit:" には変更をした doc2.txt と doc4.txt が
- "Untracked files:" には新しく追加した doc6.txt と doc7.txt が
追加されている。

** ファイルの変更履歴をGitで管理する
変更内容をコミットする。

doc4.txt と doc6.txt の変更だけを履歴に残したい場合、
1. ~git add doc4.txt doc6.txt~ でステージング、
2. ~git diff --staged~ でステージングしたファイルの変更内容を確認、
3. ~git commit -m "Fix typos and Add doc6"~ でコミット、
4. ~git log~ で履歴を確認。

変更を履歴に残さず取り消したい場合、
1. ~cat doc2.txt~ で現在の内容を確認、
2. ~git restore doc2.txt~ で doc2.txt の変更内容を取り消し、
3. ~cat doc2.txt~ で再確認すると変更した内容(付け加えた最後の行)が無くなる。
4. doc7.txt は Git に管理されていないので、 ~rm doc7.txt~ で消せばいい。
5. ~git status~ をすると、 "nothing to commit, working tree clean" と表示される。
いま取り消した内容は Git に管理される前に取り消したので、 Git で再度復元することはできない点に注意する。

これまでの応用で間違って Git に管理されたファイルを消してしまった場合でも復元できる。
1. ~rm doc3.txt~ でファイルを削除、
2. ~ls~ でファイルが削除されていることを確認、
3. ~git restore doc3.txt~ でファイルに行った変更を取り消し、つまりファイルを復元できる。

** ブランチをマージする
現在のブランチ ~dev~ で加えた内容を ~main~ に合流させる。
1. ~git checkout main~ か ~git switch main~ でブランチを main に変更する。
2. ~ls~ でディレクトリの内容が元に戻ったことを確認する。
   (チュートリアルどおりの場合は、doc6.txtが無くなる。ファイル内容も変更前のままである。)
3. ~git merge --no-ff dev~ で ~dev~ ブランチを ~main~ ブランチにマージする。

ターミナル上で実行すると、コミットメッセージを変更するための ~vi~ が立ち上がる。
問題が無ければ ~:qa~ で ~vi~ から抜け出す。
マージする際には ~--no-ff~ をつけて ~fast-forward~ しないでマージすると、枝分かれしたブランチの履歴が残る。
コミットの数が増えてしまうが、変更履歴のまとまりを確認しやすい。
~dev~ が要らない場合は ~git branch -d dev~ でブランチを削除できるが、練習2で使うのでここでは残しておく。

** 便利なことがら

*** 変更ログを分かりやすくする
~/.gitconfig に以下を入力する。
#+begin_example
  [alias]
      graph = log --graph --date-order --all -C -M --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short
#+end_example
これで ~git graph~ を打つとブランチの枝分かれなども確認できて便利。

*** エディタにGitツールを入れる
プログラムはエディタで編集するので、エディタ上でGitを動かしてしまうのが1番簡単。
エディタとしてVSCodeを使っているのであれば、VSCodeにGitを管理するプラグイン (GitGraph?) を入れてしまうのが良いだろう。

* 練習2: Github上でリポジトリを管理する
ここまででGitに管理されている記録はローカル環境にしか存在しないので、別PCでの作業やチームでの協働作業はできない。

** 目標
Github上にリポジトリを作成することで、ネットワークを介した操作ができる。

** Github上にリポジトリを作成する
1. Githubにログインしたあと、右上のプラスボタンから「New repository」を選択する。
2. Repository nameを入力し、他は今回は無しで「Create repository」を押す。

これで新しいリポジトリが作成される。
無視した箇所は、READMEファイル・.gitignoreファイル・ライセンスの作成などを尋ねられているので
自分のリポジトリを作る際には内容を気にしておく。

** Gitで管理した内容をリモートリポジトリに上げる
1. ~git remote add origin <URL>~ でリモートリポジトリを登録する。
   <URL>は、.ssh/config にGithubを登録しているなら ~github:sugayu/gittutorial.git~ など。
   していない場合はhttpsリンクを指定できる。
2. ~git push~ でリモートリポジトリにローカルリポジトリをプッシュする。

~git push~ では現在のブランチしかプッシュされないことに注意。
必要に応じてブランチごとにプッシュしたり、 ~git push --all~ でローカルの全ブランチをプッシュしたりする。

** Github上のリポジトリをローカルに落とす
作ったリモートリポジトリを、違うパソコンにコピーする気持ちで、
異なるディレクトリに落としてくる。

1. 現在の作業ディレクトリのひとつ前に戻る。
2. ~git clone <URL>~ でリポジトリをクローンする。
   もしリモートリポジトリ名と、先ほどまで作業していたリポジトリ名が完全に同じ場合は
   名前が衝突してしまうので ~git clone <URL> <name>~ で名前を変える。
3. ディレクトリに入り、 ~git status~ で状況を見る。

この方法で落とされるブランチはメインブランチだけなので、
他のブランチも持ってくる場合は ~git fetch~ や ~git pull~ する必要がある。

1. ~git branch -r~ でメインブランチしかないことを確認する。
2. ~git fetch~ で全てのブランチの情報を持ってくる。
3. ~git branch -r~ でローカルのブランチを確認する。
4. ~git checkout dev~ で ~dev~ ブランチに移動する。
5. ~git branch -r~ でローカルに ~dev~ ブランチが作成されたことを確認する。

* 練習3: プルリクエスト---Pythonコード開発に向けて
この練習では、コード開発に貢献するために、既存コードに編集を加えてプルリクエストを出すところまでを行う。
マージが衝突した場合の対応や、編集の結果コードの振舞いがどう変わったかの確認もする。

** コードの編集
~git clone~ を行ってすぐは ~main~ にいるはずである。
開発用の ~dev~ ブランチへ移動し、さらに ~dev~ から ~feature-fav~ ブランチを切って、そのブランチへ移動する。
(開発ブランチ名がユーザー間で被るのはよく無いので、個別に別の名前をつけた方が良いかもしれない。)

エディタでコードを編集する。
[[./src/gittutorial/module.py]] モジュールの中の ~print_favorites~ 関数を編集して、
~favorites~ 変数にあなたの好きなものを加える。

** Gitを使って編集した内容をリモートリポジトリに反映する

*** コミット
変更したファイルをステージに追加し、メッセージをつけてコミットする。
コミットメッセージの書き方はプロジェクトごとに異なるので、決まりがあるのならばその決まりに従って書かなければならない。
基本的には、
- 簡潔に1行で書く。
- 詳細を加えたい場合には3行目以降に書く。
- 英語の動詞から始めるのが良いとされている。
- [[https://qiita.com/shikichee/items/a5f922a3ef3aa58a1839][GitHubで使われている実用英語コメント集 #Python - Qiita]]

*** プッシュ
コードの変更を他のメンバーに通知してプロジェクトに反映するため、 ~git push~ でリモートにプッシュする。
リモートリポジトリに ~feature-fav~ ブランチが作成されていないので、プッシュと同時に作成する。
(勝手にリポジトリにプッシュするのは本当は良くなさそうですが、
オープンソースソフトウェアに貢献する際に本来どうするべきか僕は知りません。)

** プルリクエストを出し、コード作成者が承認する
コードの作成者に Github web サイト上でプルリクエストを送信する。
プルリクエストは、 Git ではなく Github の機能。
複数人がチュートリアルに参加している場合には、この部分は初めは一人だけが行うと良い。

プルリクエストを受けたコード作成者(リポジトリ管理者)は、コードの中身を確認してプルリクエストを承認する。
承認されると、 ~feature-fav~ が ~dev~ にマージされ、変更内容が ~dev~ ブランチのコードに反映される。
一人の編集結果がマージされると、他の人はリベースが必要になる (後述)。

** コード内容の変更を確認する
チュートリアル参加者は皆、ターミナル上で ~dev~ ブランチに切り替えて、 ~git pull~ でプルする。
プルするとサーバー側で更新された ~dev~ ブランチの内容がローカルと同期する。
以下のコードを打ち、出力内容の変更を確認する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src

** 手元の feature-dev ブランチに最新の dev の内容を反映する
上記の過程を経ると、プルリクエストを出した人以外は ~feature-dev~ を作成したあとに、 ~dev~ の内容が変更されてしまった。
このままでは変更内容同士が衝突するので、衝突を解決する必要がある。

1. マージ時に解決するため、そのままプルリクエストを出してみる。何が起こるかを確認する。
2. リベースを使って事前に解決する。
以下では 2 について述べる。

リベースをすることで、 ~feature-dev~ の分岐元を最新の ~dev~ へと変更する。
このときに生じる衝突を解決するためには、、、

** プルリクエスト、承認、変更の確認を繰り返す
[[プルリクエストを出し、コード作成者が承認する][#プルリクエストを出し、コード作成者が承認する]] から [[手元の feature-dev ブランチに最新の dev の内容を反映する][#手元の feature-dev ブランチに最新の dev の内容を反映する]] を繰り返す。
プルリクエストを承認する人を交代できればいいが...

全員が変更を終えたら、リポジトリ管理者が  ~dev~ の内容を ~main~ にマージする。

** pip のふるまいを確認する
~main~ ブランチがアップデートされたので、 ~pip~ でパッケージのアップデートを試みる。
#+begin_src bash
  pip install --upgrade git+ssh://git@github.com/sugayu/gittutorial.git
#+end_src
アップデートを行っても最新のコードが反映されないはず。以下のPythonコード
#+begin_src bash
  python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
を試してみても、最初のバージョンのコードが動く。

この問題は ~pip~ 側の仕様から生じている。
~pip~ はコードの変更それ自体ではなく、バージョン番号でアップデートを管理する。
これまでの過程でバージョン番号をアップデートしていないので ~pip~ はパッケージに変更があったことを認識できなかった。
本来は ~main~ ブランチにマージする前に ~release~ を切り、そこでバージョンをアップデートするとよい。
バージョン番号をアップデートして、 ~pip~ でアップデートできることを確認する。
(ついでにタグ番号もつけるとか。)
