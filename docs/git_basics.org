#+title: Gitの基礎
#+created: [2024-04-30 Tue 13:06]
#+last_modified: [2025-05-20 火 00:44]
#+filetags: :software:knowledge:

Git を使うことでコードの共同開発や配布が簡単になる。

* Git とは
分散型バージョン管理システムを提供するソフトウェア。

バージョン管理とは、コードの変更履歴を保存し、過去の開発バージョンにも戻ったり差分をとったりすることができるもの。
名前にバージョンを含めるのも原始的なバージョン管理方法 ("paper_v1.tex", "paper_v2.tex")。

分散型とは、中央でリポジトリ(データの集積所)を一括管理するのではなく、各自のコンピュータ内にローカルリポジトリ(要はGitで管理されているディレクトリ)を作成し、中央とコミュニケーションをとりながらローカルリポジトリを更新していく方式。

** Git (もしくはバージョン管理システム) の利点
- 文書やコードの履歴を管理したり、複数人でのコード編集作業が楽になる。
- ブランチを使うことで、コードの変更履歴を枝分かれさせることができる。
- ブランチを切ることで、元のコードを汚さずに自分独自の変更を加えることができる。
- 同様にして、コードの変更を試したあとに改善が見られなかった場合は、
  現在ブランチを元に戻すことでコード変更前の状態にすぐ戻れる。
  コードの変更に躊躇いがなくなる。
- コミットメッセージを必ず残す必要があるので、変更履歴の意図が分かりやすくなる。
- 一人で使う場合も、異なるPC環境間でプログラムコードを同期できる。

** 欠点
- パスワードや鍵、トークンなどを ~git~ で管理してしまうと不特定多数に公開される可能性がある。
  これらは絶対に ~git~ で管理しないこと。
  - .gitignoreファイルにまとめておくことで間違って ~git~ 管理してしまうことを防げる。
- 画像等のバイナリファイル、オフィスファイル(docx, excel, pptx)、pdf、Jupyter notebook (ipyn)、などの
  バイナリファイルは毎回全部を保存するため使用容量が大きくなってしまう。

** Githubとの違い
Gitはソフトウェアの名前。
GithubはGitのためのリモートリポジトリ作成を支援しているウェブサイト。
複数人で作業する際には、一番の元となるリポジトリ(名前は"origin"であることが多い)が必要となる。
一つの方法として、Githubにリモートリポジトリを置いて(ホストしてもらって)、各自のローカルリポジトリとGithub上のリモートリポジトリの間でGitを使って同期しながらコード開発を進めていく。

* Gitによるバージョン管理の基本的な流れ
** 一人でGitを使っている場合
既に作業ディレクトリがGitで管理されている場合(ローカルリポジトリの場合)の作業の長れを示す。
単独で作業をしていることを想定している。

1. (必要があれば)作業用のブランチ(branch)を切る。
   - ブランチは後に説明するが、今回の作業用の変更履歴を作成するということ。
2. ファイルを編集する。
3. Gitを使って更新されたファイル一覧と差分を確認する(status)。
4. 変更を保存したいファイルを選択する(staging, ~add~)。
5. ステージに載せたファイルをコミット(commit)する。
   - コミットすることで、それまでのGitで変更履歴が管理できる。
   - 付随してコミットメッセージを必ず残す。これにより変更履歴一覧を作成できる。
6. 2から5までの作業を繰り返す。
7. 作業ブランチを元のブランチに合流(merge)させる。

[画像]

** 複数人でGitを使っている場合
既に作業ディレクトリがGitで管理されている場合(ローカルリポジトリの場合)の作業の長れを示す。
複数人で作業をしていることを想定している。

1. (必要があれば)作業用のブランチ(branch)を切る。
   - ブランチは後に説明するが、つまり他の人の邪魔にならない自分だけの変更履歴を作成するということ。
2. ファイルを編集する。
3. Gitを使って更新されたファイル一覧と差分を確認する。
4. 変更を保存したいファイルを選択する(staging)。
5. ステージに載せたファイルをコミット(commit)する。
   - コミットすることで、それまでのGitで変更履歴が管理できる。
   - 付随してコミットメッセージを必ず残す。これにより変更履歴一覧を作成できる。
6. 2から5までの作業を繰り返す。
7. (必要があれば)リモートリポジトリにプッシュ(push)する。
   - プッシュすることで大元のリポジトリに変更通知を行う。
   - プッシュしなければ、これまでの変更はあくまでも自分のパソコン内の変更にすぎない。
8. (必要があり、かつ権限があれば)作業ブランチを大元のブランチにマージ(merge)する。
   - 自分の変更履歴を、他の人も作業している大元の変更履歴に合流させる。
   - マージ(したあとにプッシュ)することで、自分の作業履歴が他の人の作業にも影響を及ぼす。

他に
1. 定期的にフェッチ(fetch)とプル(pull)をすることで、リモートリポジトリの変更を監視する。
   - フェッチするとリモートリポジトリの変更通知が得られる。通知だけ。(ちょっと語弊があるが)
   - プルは「現在のブランチに対してフェッチのあとマージ」という意味で、「フェッチして得られたリモートリポジトリの変更状態に、自分のローカルリポジトリを合わせる」という作業を行う。
   - 定期的にこれらを行わないと、例えば以下のようなことが起こる。
     - 自分の作業ブランチがはるか昔のリモートリポジトリから派生した変更履歴になっており、変更内容を大元に合流させようとしても、他の人がコードに手を加えすぎていて変更履歴どおしが衝突して簡単には合流させられない、
2. リモートリポジトリの管理者は、他の人がプッシュしてきた作業ブランチの内容を確認し、問題が無ければ大元のブランチにマージする、という責任を負う。逆に言うと、責任の無い人は、こうした「他の作業者に影響を及ぼす作業」をしてはいけない。

** まだGitを使っていない場合

*** Gitで管理したいディレクトリがある場合
1. Gitで管理する予定のディレクトリに入る。
2. ~git init~ を打つことで、ディレクトリをGitに管理させる。
3. リモートリポジトリが決まっていれば、それらをGitに加える。
4. あとは既に[[*一人でGitを使っている場合][一人でGitを使っている場合]]もしくは[[*複数人でGitを使っている場合][複数人でGitを使っている場合]]と同じ流れ。

*** Gitで管理されているリポジトリを手元におく場合
1. リポジトリを手元にクローン(clone)する。
2. あとは既に[[*一人でGitを使っている場合][一人でGitを使っている場合]]もしくは[[*複数人でGitを使っている場合][複数人でGitを使っている場合]]と同じ流れ。

* ブランチのワークフロー
Gitではブランチをどのように切るかが大事な戦略であり、メンバー間で思想が共有されている必要がある。

** ブランチ
ブランチとは、枝分かれした変更履歴の「枝」のことである。
新たに変更履歴を分岐させることを、ブランチを切るという。

ブランチをどのように運用するかはチーム内で合意を得ている必要がある。
- 参考: [[https://qiita.com/ta-ke-no-bu/items/a9854deb61419a0d64c7][gitの運用ワークフローのメモ（git-flow、github flow等） #初心者 - Qiita]]

** Github flow
簡易的な、たぶん初心者向けのワークフローを説明する。
主なブランチが1種類(~master~ か ~main~)、作業をするブランチが1種類(~dev~ や ~feature~ など)ある。

*** 開発の流れ
1. ~main~ ブランチから ~dev~ ブランチを切る。
2. ~dev~ ブランチ上である機能を開発。
3. ~dev~ ブランチを ~main~ ブランチにマージさせる。
4. ~dev~ ブランチを消しても良い。

** Git flow
中規模開発に向いているワークフローについて説明する。
常に残しておくブランチが2種類、必要に応じて作るブランチが2種類ある。

*** 主なブランチ
- main (master) :: メインブランチ。コードを公開するためのブランチ。
- dev (develop) :: 開発ブランチ。開発中のコードを置くためのブランチ。

*** 派生するブランチ
- feature :: ~dev~ ブランチから分岐し、ここで何かある機能を実装したら、 ~dev~ ブランチへマージさせる。
- release :: ~dev~ ブランチを ~main~ ブランチへマージさせる前に、 ~dev~ ブランチからこのブランチを切る。
  ソフトウェアのバージョン変更など、ソフトの公開前に必要だが ~dev~ ブランチでやるべきではないことを行う。

*** 開発の流れ
1. ~main~ ブランチから ~dev~ ブランチを切る。
2. ~dev~ ブランチから ~feature~ ブランチを切る。
3. ~feature~ ブランチ上である機能を開発。
4. ~feature~ ブランチを ~dev~ ブランチにマージさせる。 ~feature~ ブランチを消す。
5. 2から4を繰り返す。
6. ~dev~ ブランチから ~release~ ブランチを分岐させ、コード公開の準備をする。
7. ~release~ ブランチを ~main~ ブランチにマージさせる。
8. ~relase~ ブランチを ~dev~ ブランチにマージさせる。 ~relase~ ブランチを消す。

* Github上でのコード公開
単純にコードを公開するだけなら、github上にリポジトリを作成し、そこにコードをアップロードすればいい、
便利に使ってもらうならば、いくつかの準備が必要である。
なお、便宜上Gitの基礎の一部としてこの項目を取り上げるが、Gitの使い方と ~pip install~ するために必要なファイル群とには直接的な関係は無いことに注意しておく。

** Github上からの ~pip install~ を可能にする
以下の二つのwebサイトを参考にする。
- [[https://setuptools.pypa.io/en/latest/userguide/package_discovery.html][Package Discovery and Namespace Packages - setuptools 69.5.1.post20240430 documentation]]
- [[https://packaging.python.org/ja/latest/guides/writing-pyproject-toml/][pyproject.toml を書く - Python Packaging User Guide]]

*** 推奨されるディレクトリ構成
ディレクトリ構成によって、配布する際の ~pyproject.toml~ の書き方が変わる。
~Pytest~ では src-layout が強く薦められている。
- [[https://docs.pytest.org/en/latest/explanation/goodpractices.html#tests-outside-application-code][Good Integration Practices — pytest documentation]]

* 注意
** Git で管理してはいけないもの
- これらは .gitignore ファイルにまとめておく

** Git で管理すべきでないもの
- 画像等のバイナリファイル。Gitはテキストファイルは差分だけを保存できるが、バイナリファイルは毎回全部を保存するため使用容量が大きくなってしまう。

* Git コマンド集
- 参考： https://qiita.com/kohga/items/dccf135b0af395f69144

- ~git init~ :: 現在のディレクトリをGitで管理する。

- ~git init --bare~ :: ベアリポジトリを作るためのコマンド。

- ~git clone~ :: リモートレポジトリをローカルに複製(クローン)する。

- ~git branch <branch>~ :: ブランチを作成。

- ~git checkout <branch>~ or ~git switch <branch>~ :: ブランチへ切り替え。

- ~git checkout -b <branch>~ :: ブランチを作成して切り替え。

- ~git add <file>~ :: 変更したファイルをステージに追加する。
  ~git add .~ で変更した全ファイルをステージに追加する。

- ~git commit -m "message"~ :: ステージに追加したファイルの変更履歴を記録(コミット)する。
  コミットメッセージは必ず書く。

- ~git merge <branch>~ :: <branch> を現在のブランチへマージする。

- ~git fetch~ :: リモートレポジトリの変更内容を取得。

- ~git pull~ :: ~git fetch~ のあとに ~git merge~ を連続で行う。
