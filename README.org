* GitTutorial
Git のチュートリアルを提供するためのリポジトリ。

* 手順
** 練習1: Gitを使って履歴を残す
この練習はローカルの作業で完結する。

*** コードの編集
~dev~ からブランチ ~feature-work~ を切って、 ~feature-work~ へ移動する。

エディタでコードを編集する。
file:src/gittutorial/module.py モジュールの中の ~print_what_working_on~ 関数を編集して、
~works~ 変数に、あなたの研究内容の短い説明を加える。

** 練習2の準備: gitレポジトリの準備
*** Githubのアカウント作成

*** リポジトリのクローン
必須ではないがおすすめ： ~conda~ で新しく環境を作成する。
#+begin_src bash
  create -n gittutorial python=3.9
#+end_src

*** コードの実行
~gittutorial~ ディレクトリのルートで、以下のコマンドを打ってコードを実行する。

#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
- ~PYTHONPATH~ :: Pythonコードのパスを設定する環境変数。
  コマンドの直前に代入すると、そのコマンドを走らせるときだけ環境変数を上書きすることができる。
- ~python -c~ :: 直後の文字列を Python で実行する。
- ~;~ :: Python で複数行にわたるコードを1行で書きたいときはセミコロンを使う。
  Python でなんでもかんでも1行にまとめることは推奨されないので、ターミナルでワンライナーを書くときに使うくらいで。

~print_favorites~ を実行すると、「コード作成者の好きなもの」が表示される。

** 練習2: プルリクエスト
まず一つ目の例として、コード開発に貢献するために、コードを編集してプルリクエストを出す。

*** コードの編集
~main~ からブランチ ~feature-fav~ を切って、そのブランチへ移動する。

エディタでコードを編集する。
file:src/gittutorial/module.py モジュールの中の ~print_favorites~ 関数を編集して、
~favorites~ 変数にあなたの好きなものを加える。

*** Gitを使って編集した内容をリモートリポジトリに反映する

**** コミット
変更したファイルをステージに追加し、メッセージをつけてコミットする。

**** プッシュ
変更をプッシュする。
リモートリポジトリに ~feature-fav~ ブランチが作成されていないので、プッシュと同時に作成する。
(勝手にリポジトリにプッシュするのは本当は良くないですが、
オープンソースソフトウェアに貢献する際に本来どうするべきか僕は知りません。)

*** プルリクエストを出し、コード作成者が承認する
コードの作成者にプルリクエストを送信する。
プルリクエストは、gitではなくgithubの機能です。
複数人がチュートリアルに参加している場合には、この部分は初めは一人だけが行うと良い。
他の人は後にリベースが必要になる。

プルリクエストを受けたコード作成者は、コードの中身を確認してプルリクエストを承認する。
承認されると、 ~feature-fav~ が ~main~ にマージされ、変更内容が ~main~ ブランチのコードに反映される。

*** コード内容の変更を確認する
~main~ ブランチに切り替えて、プルする。
以下のコードを打ち、出力内容の変更を確認する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src

*** 手元の feature-dev ブランチに最新の dev の内容を反映する
上記の過程を経ると、プルリクエストを出した人以外は ~feature-dev~ を作成してから、 ~dev~ の内容が変更されている。
このままでは変更内容が衝突するので、衝突を解決する必要がある。

1. マージ時に解決するため、そのままプルリクエストを出してみる。何が起こるかを確認する。
2. リベースを使って事前に解決する。
以下では 2 について述べる。

リベースをすることで、 ~feature-dev~ の分岐元を最新の ~dev~ へと変更する。
このときに生じる衝突を解決するためには、、、

*** プルリクエスト、承認、変更の確認を繰り返す
[[*プルリクエストを出し、コード作成者が承認する][プルリクエストを出し、コード作成者が承認する]] から [[*手元の feature-dev ブランチに最新の dev の内容を反映する][手元の feature-dev ブランチに最新の dev の内容を反映する]] を繰り返す。
プルリクエストを承認する人を交代できればいいが...

* 参考資料
** Gitコマンドの確認
- 参考： https://qiita.com/kohga/items/dccf135b0af395f69144

*** ~git clone~
リモートレポジトリをローカルに複製(クローン)する。

*** ~git branch <branch>~
ブランチを作成。

*** ~git checkout <branch>~ or ~git switch <branch>~
ブランチへ切り替え。

*** ~git checkout -b <branch>~
ブランチを作成して切り替え。

*** ~git add <file>~
変更したファイルをステージに追加する。
~git add .~ で変更した全ファイルをステージに追加する。

*** ~git commit -m "message"~
ステージに追加したファイルの変更履歴を記録(コミット)する。
コミットメッセージは必ず書く。
コミットメッセージは英語で、基本的に動詞から始めるのが良い。

*** ~git merge <branch>~


*** ~git fetch~
リモートレポジトリの変更内容を取得。

*** ~git pull~
