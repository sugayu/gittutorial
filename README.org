* GitTutorial
Git のチュートリアルを提供するためのリポジトリ。

* 手順
** 練習1: Gitを使って履歴を残す---コマンドラインの練習
この練習はローカルの作業で完結する。
日々の作業に使う感覚で Git を扱えるようになることが目標。

*** 作業ディレクトリを作る
好きな場所にディレクトリを作成し、中に入る。
~git init~ をして Git を準備する。
~ls -a~ で ~.git~ ディレクトリが作成されたことを確認する。

*** ファイルを編集する
好きなようにファイルを作成する。

好きなものが無い場合のチュートリアル：
ターミナルの練習としてファイル作成の複数の方法を試してみる。
作ったファイルの中身は ~cat~, ~more~, ~less~ などで確認できる。
1. ~touch doc1.txt~ で空ファイルを作成する。
2. ~echo -e "Tutorial.\nThis text is doc2." > doc2.txt~ で文字列を書き込む。
3. ~cat > doc3.txt~ のあと文章を標準入力に打ち込む。
   例えば "Tutorial<Enterを押す>This text is doc3."
   ~Ctrl-D~ で End of File を入力して抜け出す。
4. ~cat doc2.txt doc3.txt > doc4.txt~ でテキストを結合する。
5. ~ls | cat > doc5.txt~ でディレクトリ内容を書き出す。
   (doc5.txtに"doc5.txt"が書き込まれている。このことから、このコマンドの実行順序が分かる。)

*** ファイルをGitの管理下におく
~git status~ で状態を確認する。
"Untracked files:" の中に新しく作成したファイルやディレクトリが一覧として表示されている。
~git add .~ で全てのファイルをステージングする。
~git status~ でGit内部でファイルがどのように扱われているか(状態がどのように変化したか)確認する。
~git commit -m "First commit"~ で変更内容をコミットする。
1番最初のコミットなので、通例コミットメッセージは "First commit" にしておいた。
が、内容は何でもいい。
~git config~ をしなさい、という警告が出た場合は ~git~ に名前とメールアドレスをまだ教えていないので
指定されたコマンドで ~git~ に情報を与えることができる。このチュートリアルでは無視して進める。
~git status~ で現在の状態を、 ~git log~ でコミット履歴を表示して確認する。

*** ファイルを編集する
作業用に新しく~feature-tutorial~ ブランチを切るために、 ~git checkout -b feature-tutorial~ を入力する。
~git status~ や ~git branch~ で現在ローカルに存在するブランチを確認する。

好きなようにファイルを編集する。
好きなものが無い場合のチュートリアル：
1. ~echo "This is the end of the line." >> doc2.txt~ で文字列を追加する。
2. ~cat * | grep "x" > doc6.txt~ で、現在のディレクトリにある全てのファイル内容を結合して、 "x" を含むものだけをファイルに書き出す。
3. Macの場合 ~sed -i "" "s/is doc/is not doc/g" doc4.txt~ ; Linuxの場合 ~sed -i -e "s/is doc/is not doc/g" doc4.txt~
   でdoc4.txtの中身を簡単に修正して上書きする。
   MacとLinuxはデフォルトで入っている ~sed~ の系統が違っており、コマンドのオプションの振舞いが異なるので注意する。
   ~sed~ コマンドは便利だが、意図しない結果にならないか注意する。
4. ~awk 'NR <= 3{print NR "---" $0 }; NR > 3{gsub("txt", "jpeg", $0); print $0}' doc5.txt > doc7.txt~ で
   3行目までは行番号を追加し、4行目以降は拡張子をjpegに変更して、新しいファイルに書き出す。
   古い ~awk~ コマンドでは上書き保存はできないので注意する。
   ~awk~ は表の形をしたテキストの抽出作業に向いているので、 ~sed~ と良いところを補い合って使いわける。

~git status~ で変更内容を確認する。
チュートリアルどおりにファイルを編集すれば、
"Changes not staged for commit:" には変更をした doc2.txt と doc4.txt が、
Untracked files: には新しく追加した doc6.txt と doc7.txt が追加されている。

*** ファイルの変更履歴をGitで管理する
変更内容をコミットする。

doc4.txt と doc6.txt の変更だけを履歴に残したい場合、
~git add doc4.txt doc6.txt~ でステージング、
~git diff --staged~ でステージングしたファイルの変更内容を確認、
~git commit -m "Fix typos and Add doc6"~ でコミット。
~git log~ で履歴を確認。

変更を履歴に残さず取り消したい場合、
~cat doc2.txt~ で現在の内容を確認、
~git restore doc2.txt~ で doc2.txt の変更内容を取り消し、
~cat doc2.txt~ で再確認すると変更した内容(付け加えた最後の行)が無くなる。
doc7.txt は Git に管理されていないので、 ~rm doc7.txt~ で消せばいい。
~git status~ をすると、 "nothing to commit, working tree clean" と表示される。
いま取り消した内容は Git に管理される前に取り消したので、 Git で再度復元することはできない点に注意する。

これまでの応用で間違って Git に管理されたファイルを消してしまった場合でも復元できる。
~rm doc3.txt~ でファイルを削除、
~ls~ でファイルが削除されていることを確認、
~git restore doc3.txt~ でファイルに行った変更を取り消し、
つまりファイルを復元できる。

*** ブランチをマージする
現在のブランチ feature-tutorial で加えた内容を main に合流させる。
~git checkout main~ か ~git switch main~ でブランチを main に変更する。
環境によっては main ではなく master の場合もある。
~ls~ でディレクトリの内容が元に戻ったことを確認する。
(チュートリアルどおりの場合は、doc6.txtが無くなる。ファイル内容も変更前のままである。)

~git merge --no-ff feature-tutorial~ で feature-tutorial ブランチを main ブランチにマージする。
ターミナル上で実行すると、コミットメッセージを変更するための ~vi~ が立ち上がる。
問題が無ければ ~:qa~ で ~vi~ から抜け出す。
マージする際には ~--no-ff~ をつけて ~fast-forward~ しないでマージすると、枝分かれしたブランチの履歴が残る。
コミットの数が増えてしまうが、変更履歴のまとまりを確認しやすい。
~feature-tutorial~ はもう要らないので、 ~git branch -d feature-tutorial~ でブランチを削除する。

*** 便利なことがら

**** 変更ログを分かりやすくする
~/.gitconfig に以下を入力する。
#+begin_example
  [alias]
      graph = log --graph --date-order --all -C -M --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short
#+end_example
これで ~git graph~ を打つとブランチの枝分かれなども確認できて便利。

**** エディタにGitツールを入れる
プログラムはエディタで編集するので、エディタ上でGitを動かしてしまうのが1番簡単。
エディタとしてVSCodeを使っているのであれば、VSCodeにGitを管理するプラグイン (GitGraph?) を入れてしまうのが良いだろう。

** 練習2の準備: Gitレポジトリの準備---sshやpipなど
*** Githubのアカウント作成
Githubアカウントを持っていなければ作成する。
今度使い続けることを考慮したうえでアカウント名を考えると良い。

*** ssh鍵作成
Githubへssh接続するためにssh鍵を作成する必要がある。
以下のコマンドでEd25519鍵を作成する。
#+begin_src bash
  mkdir .ssh
  ssh-keygen -o -a 100 -t ed25519
#+end_src
パスフレーズの入力はした方が良いと言われてはいるが、今回は何も入力せずにエンターを押してください。
もし気になるなら、気になったときに作り直せばいい。
上記コマンドで .ssh ディレクトリに ~id_ed25519~ (秘密鍵) と ~id_ed25519.pub~ (公開鍵) が作成される。
ssh鍵認証は、接続先サーバーに公開鍵を置き、手元(クライアント)の秘密鍵と称号することで認証するシステム。
公開鍵は外部に公開するものだが、 *秘密鍵は絶対に外部に公開してはいけない* 。

公開鍵 ~id_ed25519.pub~ を Github へ持っていく。
Github上で右上のアイコンから Setting → SSH and GPG keys と進む。
New SSH Key から新しい鍵を登録する。
タイトルは自分が鍵を区別する際に分かりやすいようなタイトルをつけ、 Key の欄に公開鍵の中身を入力して追加する。

今後の ssh 接続が楽なように、 ~/.ssh/config に以下を書き込む。
#+begin_example
  Host github
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519
#+end_example
ターミナル上で ~ssh github~ と打ち、
#+begin_example
  Hi <UserName>! You've successfully authenticated, but GitHub does not provide shell access.
  Connection to github.com closed.
#+end_example
と表示されればうまく動いている。

ssh 接続はパスワード認証よりも鍵認証の方が推奨されているので、今後もここで作った鍵を使って、同様にログインできるようにすればいい。
サーバーに公開鍵を置く方法はインターネットで調べるとたくさん出てくる。

*** Python環境の構築
この項目は Git とは直接関係ないのでやらなくてもいい。
ここで設定をしておくと、 Python パッケージを作る際に気をつけるべきことの話につながる。

必須ではないがおすすめ： ~conda~ で新しく環境を作成する。
環境を作成したのち、その環境でチュートリアル用のコードをダウンロードする。
#+begin_src bash
  conda create -n gittutorial python=3.9
  conda activate gittutorial
  pip install git+ssh://git@github.com/sugayu/gittutorial.git
#+end_src
正しくダウンロードできていれば、以下のコードが動く。詳細は次の節で。
#+begin_src bash
  python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src

*** リポジトリのクローン
練習2用の作業ディレクトリ上で、チュートリアルのためのリポジトリをGithubからクローンする。
#+begin_src bash
  git clone github:sugayu/gittutorial.git
#+end_src
で現在のディレクトリに gittutorial というディレクトリが作成される。

gittutorial ディレクトリのルートで、以下のコマンドを打ってコードを実行する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
- ~PYTHONPATH~ :: Pythonコードのパスを設定する環境変数。
  コマンドの直前に代入すると、そのコマンドを走らせるときだけ環境変数を上書きすることができる。
- ~python -c~ :: 直後の文字列を Python で実行する。
- ~;~ :: Python で複数行にわたるコードを1行で書きたいときはセミコロンを使う。
  Python でなんでもかんでも1行にまとめることは推奨されないので、ターミナルでワンライナーを書くときに使うくらいで。

~print_favorites~ を実行すると、「コード作成者の好きなもの」が表示される。

** 練習2: プルリクエスト---Pythonコード開発に向けて
この練習では、コード開発に貢献するために、既存コードに編集を加えてプルリクエストを出すところまでを行う。
マージが衝突した場合の対応や、編集の結果コードの振舞いがどう変わったかの確認もする。

*** コードの編集
~git clone~ を行ってすぐは ~main~ にいるはずである。
開発用の ~dev~ ブランチへ移動し、さらに ~dev~ から ~feature-fav~ ブランチを切って、そのブランチへ移動する。
(開発ブランチ名がユーザー間で被るのはよく無いので、個別に別の名前をつけた方が良いかもしれない。)

エディタでコードを編集する。
[[./src/gittutorial/module.py]] モジュールの中の ~print_favorites~ 関数を編集して、
~favorites~ 変数にあなたの好きなものを加える。

*** Gitを使って編集した内容をリモートリポジトリに反映する

**** コミット
変更したファイルをステージに追加し、メッセージをつけてコミットする。
コミットメッセージの書き方はプロジェクトごとに異なるので、決まりがあるのならばその決まりに従って書かなければならない。
基本的には、
- 簡潔に1行で書く。
- 詳細を加えたい場合には3行目以降に書く。
- 英語の動詞から始めるのが良いとされている。
- [[https://qiita.com/shikichee/items/a5f922a3ef3aa58a1839][GitHubで使われている実用英語コメント集 #Python - Qiita]]

**** プッシュ
コードの変更を他のメンバーに通知してプロジェクトに反映するため、 ~git push~ でリモートにプッシュする。
リモートリポジトリに ~feature-fav~ ブランチが作成されていないので、プッシュと同時に作成する。
(勝手にリポジトリにプッシュするのは本当は良くなさそうですが、
オープンソースソフトウェアに貢献する際に本来どうするべきか僕は知りません。)

*** プルリクエストを出し、コード作成者が承認する
コードの作成者に Github web サイト上でプルリクエストを送信する。
プルリクエストは、 Git ではなく Github の機能。
複数人がチュートリアルに参加している場合には、この部分は初めは一人だけが行うと良い。

プルリクエストを受けたコード作成者(リポジトリ管理者)は、コードの中身を確認してプルリクエストを承認する。
承認されると、 ~feature-fav~ が ~dev~ にマージされ、変更内容が ~dev~ ブランチのコードに反映される。
一人の編集結果がマージされると、他の人はリベースが必要になる (後述)。

*** コード内容の変更を確認する
チュートリアル参加者は皆、ターミナル上で ~dev~ ブランチに切り替えて、 ~git pull~ でプルする。
プルするとサーバー側で更新された ~dev~ ブランチの内容がローカルと同期する。
以下のコードを打ち、出力内容の変更を確認する。
#+begin_src bash
  PYTHONPATH=src python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src

*** 手元の feature-dev ブランチに最新の dev の内容を反映する
上記の過程を経ると、プルリクエストを出した人以外は ~feature-dev~ を作成したあとに、 ~dev~ の内容が変更されてしまった。
このままでは変更内容同士が衝突するので、衝突を解決する必要がある。

1. マージ時に解決するため、そのままプルリクエストを出してみる。何が起こるかを確認する。
2. リベースを使って事前に解決する。
以下では 2 について述べる。

リベースをすることで、 ~feature-dev~ の分岐元を最新の ~dev~ へと変更する。
このときに生じる衝突を解決するためには、、、

*** プルリクエスト、承認、変更の確認を繰り返す
[[プルリクエストを出し、コード作成者が承認する][#プルリクエストを出し、コード作成者が承認する]] から [[手元の feature-dev ブランチに最新の dev の内容を反映する][#手元の feature-dev ブランチに最新の dev の内容を反映する]] を繰り返す。
プルリクエストを承認する人を交代できればいいが...

全員が変更を終えたら、リポジトリ管理者が  ~dev~ の内容を ~main~ にマージする。

*** pip のふるまいを確認する
~main~ ブランチがアップデートされたので、 ~pip~ でパッケージのアップデートを試みる。
#+begin_src bash
  pip install --upgrade git+ssh://git@github.com/sugayu/gittutorial.git
#+end_src
アップデートを行っても最新のコードが反映されないはず。以下のPythonコード
#+begin_src bash
  python -c "from gittutorial import print_favorites; print_favorites()"
#+end_src
を試してみても、最初のバージョンのコードが動く。

この問題は ~pip~ 側の仕様から生じている。
~pip~ はコードの変更それ自体ではなく、バージョン番号でアップデートを管理する。
これまでの過程でバージョン番号をアップデートしていないので ~pip~ はパッケージに変更があったことを認識できなかった。
本来は ~main~ ブランチにマージする前に ~release~ を切り、そこでバージョンをアップデートするとよい。
バージョン番号をアップデートして、 ~pip~ でアップデートできることを確認する。
(ついでにタグ番号もつけるとか。)

* 参考資料
** Gitコマンドの確認
- 参考： https://qiita.com/kohga/items/dccf135b0af395f69144

- ~git init~ :: 現在のディレクトリをGitで管理する。

- ~git clone~ :: リモートレポジトリをローカルに複製(クローン)する。

- ~git branch <branch>~ :: ブランチを作成。

- ~git checkout <branch>~ or ~git switch <branch>~ :: ブランチへ切り替え。

- ~git checkout -b <branch>~ :: ブランチを作成して切り替え。

- ~git add <file>~ :: 変更したファイルをステージに追加する。
  ~git add .~ で変更した全ファイルをステージに追加する。

- ~git commit -m "message"~ :: ステージに追加したファイルの変更履歴を記録(コミット)する。
  コミットメッセージは必ず書く。

- ~git merge <branch>~ ::

- ~git fetch~ :: リモートレポジトリの変更内容を取得。

- ~git pull~ ::
